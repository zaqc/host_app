/*
 * SmallFont.cpp
 *
 *  Created on: Mar 13, 2017
 *      Author: zaqc
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <GLES2/gl2.h>

#include "SmallFont.h"
#include "GlUtil.h"
//----------------------------------------------------------------------------

SmallFont *small_font = NULL;
//----------------------------------------------------------------------------

unsigned char font_5x7[] = { 0x00, 0x00, 0x00, 0x00, 0x00, // (space)
		0x00, 0x00, 0x5F, 0x00, 0x00, // !
		0x00, 0x07, 0x00, 0x07, 0x00, // "
		0x14, 0x7F, 0x14, 0x7F, 0x14, // #
		0x24, 0x2A, 0x7F, 0x2A, 0x12, // $
		0x23, 0x13, 0x08, 0x64, 0x62, // %
		0x36, 0x49, 0x55, 0x22, 0x50, // &
		0x00, 0x05, 0x03, 0x00, 0x00, // '
		0x00, 0x1C, 0x22, 0x41, 0x00, // (
		0x00, 0x41, 0x22, 0x1C, 0x00, // )
		0x08, 0x2A, 0x1C, 0x2A, 0x08, // *
		0x08, 0x08, 0x3E, 0x08, 0x08, // +
		0x00, 0x50, 0x30, 0x00, 0x00, // ,
		0x08, 0x08, 0x08, 0x08, 0x08, // -
		0x00, 0x60, 0x60, 0x00, 0x00, // .
		0x20, 0x10, 0x08, 0x04, 0x02, // /
		0x3E, 0x51, 0x49, 0x45, 0x3E, // 0
		0x00, 0x42, 0x7F, 0x40, 0x00, // 1
		0x42, 0x61, 0x51, 0x49, 0x46, // 2
		0x21, 0x41, 0x45, 0x4B, 0x31, // 3
		0x18, 0x14, 0x12, 0x7F, 0x10, // 4
		0x27, 0x45, 0x45, 0x45, 0x39, // 5
		0x3C, 0x4A, 0x49, 0x49, 0x30, // 6
		0x01, 0x71, 0x09, 0x05, 0x03, // 7
		0x36, 0x49, 0x49, 0x49, 0x36, // 8
		0x06, 0x49, 0x49, 0x29, 0x1E, // 9
		0x00, 0x36, 0x36, 0x00, 0x00, // :
		0x00, 0x56, 0x36, 0x00, 0x00, // ;
		0x00, 0x08, 0x14, 0x22, 0x41, // <
		0x14, 0x14, 0x14, 0x14, 0x14, // =
		0x41, 0x22, 0x14, 0x08, 0x00, // >
		0x02, 0x01, 0x51, 0x09, 0x06, // ?
		0x32, 0x49, 0x79, 0x41, 0x3E, // @
		0x7E, 0x11, 0x11, 0x11, 0x7E, // A
		0x7F, 0x49, 0x49, 0x49, 0x36, // B
		0x3E, 0x41, 0x41, 0x41, 0x22, // C
		0x7F, 0x41, 0x41, 0x22, 0x1C, // D
		0x7F, 0x49, 0x49, 0x49, 0x41, // E
		0x7F, 0x09, 0x09, 0x01, 0x01, // F
		0x3E, 0x41, 0x41, 0x51, 0x32, // G
		0x7F, 0x08, 0x08, 0x08, 0x7F, // H
		0x00, 0x41, 0x7F, 0x41, 0x00, // I
		0x20, 0x40, 0x41, 0x3F, 0x01, // J
		0x7F, 0x08, 0x14, 0x22, 0x41, // K
		0x7F, 0x40, 0x40, 0x40, 0x40, // L
		0x7F, 0x02, 0x04, 0x02, 0x7F, // M
		0x7F, 0x04, 0x08, 0x10, 0x7F, // N
		0x3E, 0x41, 0x41, 0x41, 0x3E, // O
		0x7F, 0x09, 0x09, 0x09, 0x06, // P
		0x3E, 0x41, 0x51, 0x21, 0x5E, // Q
		0x7F, 0x09, 0x19, 0x29, 0x46, // R
		0x46, 0x49, 0x49, 0x49, 0x31, // S
		0x01, 0x01, 0x7F, 0x01, 0x01, // T
		0x3F, 0x40, 0x40, 0x40, 0x3F, // U
		0x1F, 0x20, 0x40, 0x20, 0x1F, // V
		0x7F, 0x20, 0x18, 0x20, 0x7F, // W
		0x63, 0x14, 0x08, 0x14, 0x63, // X
		0x03, 0x04, 0x78, 0x04, 0x03, // Y
		0x61, 0x51, 0x49, 0x45, 0x43, // Z
		0x00, 0x00, 0x7F, 0x41, 0x41, // [
		0x02, 0x04, 0x08, 0x10, 0x20, // "\"
		0x41, 0x41, 0x7F, 0x00, 0x00, // ]
		0x04, 0x02, 0x01, 0x02, 0x04, // ^
		0x40, 0x40, 0x40, 0x40, 0x40, // _
		0x00, 0x01, 0x02, 0x04, 0x00, // `
		0x20, 0x54, 0x54, 0x54, 0x78, // a
		0x7F, 0x48, 0x44, 0x44, 0x38, // b
		0x38, 0x44, 0x44, 0x44, 0x20, // c
		0x38, 0x44, 0x44, 0x48, 0x7F, // d
		0x38, 0x54, 0x54, 0x54, 0x18, // e
		0x08, 0x7E, 0x09, 0x01, 0x02, // f
		0x08, 0x14, 0x54, 0x54, 0x3C, // g
		0x7F, 0x08, 0x04, 0x04, 0x78, // h
		0x00, 0x44, 0x7D, 0x40, 0x00, // i
		0x20, 0x40, 0x44, 0x3D, 0x00, // j
		0x00, 0x7F, 0x10, 0x28, 0x44, // k
		0x00, 0x41, 0x7F, 0x40, 0x00, // l
		0x7C, 0x04, 0x18, 0x04, 0x78, // m
		0x7C, 0x08, 0x04, 0x04, 0x78, // n
		0x38, 0x44, 0x44, 0x44, 0x38, // o
		0x7C, 0x14, 0x14, 0x14, 0x08, // p
		0x08, 0x14, 0x14, 0x18, 0x7C, // q
		0x7C, 0x08, 0x04, 0x04, 0x08, // r
		0x48, 0x54, 0x54, 0x54, 0x20, // s
		0x04, 0x3F, 0x44, 0x40, 0x20, // t
		0x3C, 0x40, 0x40, 0x20, 0x7C, // u
		0x1C, 0x20, 0x40, 0x20, 0x1C, // v
		0x3C, 0x40, 0x30, 0x40, 0x3C, // w
		0x44, 0x28, 0x10, 0x28, 0x44, // x
		0x0C, 0x50, 0x50, 0x50, 0x3C, // y
		0x44, 0x64, 0x54, 0x4C, 0x44, // z
		0x00, 0x08, 0x36, 0x41, 0x00, // {
		0x00, 0x00, 0x7F, 0x00, 0x00, // |
		0x00, 0x41, 0x36, 0x08, 0x00, // }
		0x08, 0x08, 0x2A, 0x1C, 0x08, // ->
		0x08, 0x1C, 0x2A, 0x08, 0x08 // <-
		};
//----------------------------------------------------------------------------

SmallFont::SmallFont() {
	const char vs[] = "attribute vec4 VertexPos; \n"
			"attribute vec2 TexturePos; \n"
			"varying vec2 TextCoord; \n"
			"uniform vec4 FontColor; \n"
			"void main() \n"
			"{ \n"
			"    gl_Position = VertexPos; \n"
			"    TextCoord = TexturePos; \n"
			"} \n";

	const char fs[] = "precision mediump float;\n"
			"varying vec2 TextCoord;\n"
			"uniform sampler2D Texture; \n"
			"vec4 txtColor; \n"
			"void main() \n"
			"{ \n"
			"    txtColor = texture2D(Texture, TextCoord); \n"
			"    gl_FragColor = txtColor; \n"
			"} \n";

	m_Prog = createProgram(vs, fs);
	if (!m_Prog) {
		printf("Can't load program for TextScroller...\n");
		exit(-1);
	}
	m_paramVertexPos = glGetAttribLocation(m_Prog, "VertexPos");
	m_paramTexturePos = glGetAttribLocation(m_Prog, "TexturePos");
	m_paramTexture = glGetUniformLocation(m_Prog, "Texture");
	m_paramFontColor = glGetUniformLocation(m_Prog, "FontColor");

	m_Data = new GLubyte[1024 * 16 * 4];
	for (int i = 0; i < 1024 * 16; i++) {
		m_Data[i * 4] = 0;
		m_Data[i * 4 + 1] = 0;
		m_Data[i * 4 + 2] = 0;
		m_Data[i * 4 + 3] = 0;
	}

	unsigned char *font_ptr = font_5x7;

	for (unsigned int n = 0; n < sizeof(font_5x7) / 5; n++) {
		font_ptr = &font_5x7[n * 5];
		for (int i = 0; i < 5; i++) {
			unsigned char v = *font_ptr;
			for (int j = 0; j < 8; j++) {
				int offset = (i * 4 + n * 6 * 4) + j * 4096;
				m_Data[offset] = (v & 0x80) ? 255 : 0;
				m_Data[offset + 1] = (v & 0x80) ? 255 : 0;
				m_Data[offset + 2] = (v & 0x80) ? 255 : 0;
				m_Data[offset + 3] = (v & 0x80) ? 255 : 0;
				v <<= 1;
			}
			font_ptr++;
		}
	}

	glGenTextures(1, &m_Text);
	glBindTexture(GL_TEXTURE_2D, m_Text);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 1024, 16, 0, GL_RGBA,
	GL_UNSIGNED_BYTE, m_Data);	// GL_ALPHA
	glGenerateMipmap(GL_TEXTURE_2D);

	glGenFramebuffers(1, &m_FB);
	glBindFramebuffer(GL_FRAMEBUFFER, m_FB);
	glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, m_Text, 0);

	glBindFramebuffer(GL_FRAMEBUFFER, 0);	// unBind texture
	glBindTexture(GL_TEXTURE_2D, 0);	// unBind texture

	glActiveTexture(GL_TEXTURE2);
	glGenTextures(1, &m_BkText);
	glBindTexture(GL_TEXTURE_2D, m_BkText);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 1024, 6, 0, GL_RGBA,
	GL_UNSIGNED_BYTE, NULL);	// GL_ALPHA
	glBindTexture(GL_TEXTURE_2D, 0);

	m_V = new GLfloat[12 * 1000];
	m_T = new GLfloat[8 * 1000];
	m_Ndx = new GLushort[6 * 1000];
	m_Index = 0;
}
//----------------------------------------------------------------------------

SmallFont::~SmallFont() {
	delete[] m_Ndx;
	delete[] m_T;
	delete[] m_V;

	glDeleteTextures(1, &m_BkText);

	glDeleteFramebuffers(1, &m_FB);
	glDeleteTextures(1, &m_Text);
	delete[] m_Data;
}
//----------------------------------------------------------------------------

int SmallFont::GetStringWidth(char *aStr) {
	return strlen(aStr) * 6;
}
//----------------------------------------------------------------------------

int SmallFont::GetStringHeight(void) {
	return 8;
}
//----------------------------------------------------------------------------

void SmallFont::RenderString(int aX, int aY, char *aStr) {
	int len = strlen((char *) aStr);

	if (m_Index + len >= 1000)
		FlushText();

	char *str = aStr;
	for (int i = 0; i < len; i++) {
		int ch = (unsigned char) *str - 32;
		float x1 = ((float) (aX + i * 6)) / 400.0 - 1.0;
		float x2 = ((float) (aX + (i + 1) * 6)) / 400.0 - 1.0;

		float y1 = 1.0 - ((float) aY) / 240.0;
		float y2 = 1.0 - ((float) (aY + 8)) / 240.0;

		GLfloat _v[] = { /* vertexes */
		x1, y1, 0.0f, /**/
		x1, y2, 0.0f, /**/
		x2, y1, 0.0f, /**/
		x2, y2, 0.0f };
		memcpy(&m_V[m_Index * 12], _v, 12 * sizeof(GLfloat));

		float tx1 = 1.0 / 1024.0 * (float) ch * 6.0;
		float tx2 = 1.0 / 1024.0 * (float) (ch + 1) * 6.0;
		float ty = 1.0 / 16.0 * 8.0;
		GLfloat _txc[] = { /* texture coordinate */
		tx1, ty, /**/
		tx1, 0.0f, /**/
		tx2, ty, /**/
		tx2, 0.0f };
		memcpy(&m_T[m_Index * 8], _txc, 8 * sizeof(GLfloat));

		GLushort n = m_Index * 4;
		GLushort _ndx[] = { (GLushort) (n + 1), (GLushort) (n + 0), (GLushort) (n + 2), (GLushort) (n + 1),
				(GLushort) (n + 2), (GLushort) (n + 3) };
		memcpy(&m_Ndx[m_Index * 6], _ndx, 6 * sizeof(GLushort));

		m_Index++;
		str++;
	}
}

void SmallFont::FlushText(void) {
	if (m_Index != 0) {
		glViewport(0, 0, 800, 480);
		glDisable(GL_DEPTH_TEST);

		glUseProgram(m_Prog);

		glVertexAttribPointer(m_paramVertexPos, 3, GL_FLOAT, GL_FALSE, 0, m_V);
		glEnableVertexAttribArray(m_paramVertexPos);

		glVertexAttribPointer(m_paramTexturePos, 2, GL_FLOAT, GL_FALSE, 0, m_T);
		glEnableVertexAttribArray(m_paramTexturePos);

		glActiveTexture(GL_TEXTURE1);
		glBindTexture(GL_TEXTURE_2D, m_Text);
		glUniform1i(m_paramTexture, 1);

		glDrawElements(GL_TRIANGLES, 6 * m_Index, GL_UNSIGNED_SHORT, m_Ndx);

		glBindTexture(GL_TEXTURE_2D, 0);
		m_Index = 0;
	}
}
//----------------------------------------------------------------------------
